/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser.analysis;

import java.util.*;
import parser.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProg().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProg(AProg node)
    {
        defaultIn(node);
    }

    public void outAProg(AProg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProg(AProg node)
    {
        inAProg(node);
        {
            List<PRule> copy = new ArrayList<PRule>(node.getRules());
            for(PRule e : copy)
            {
                e.apply(this);
            }
        }
        outAProg(node);
    }

    public void inARule(ARule node)
    {
        defaultIn(node);
    }

    public void outARule(ARule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARule(ARule node)
    {
        inARule(node);
        if(node.getHead() != null)
        {
            node.getHead().apply(this);
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getAsk());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getTell());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getBody());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outARule(node);
    }

    public void inAHead(AHead node)
    {
        defaultIn(node);
    }

    public void outAHead(AHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHead(AHead node)
    {
        inAHead(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<TIdent> copy = new ArrayList<TIdent>(node.getParams());
            for(TIdent e : copy)
            {
                e.apply(this);
            }
        }
        outAHead(node);
    }

    public void inAFalseExpr(AFalseExpr node)
    {
        defaultIn(node);
    }

    public void outAFalseExpr(AFalseExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExpr(AFalseExpr node)
    {
        inAFalseExpr(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseExpr(node);
    }

    public void inATrueExpr(ATrueExpr node)
    {
        defaultIn(node);
    }

    public void outATrueExpr(ATrueExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExpr(ATrueExpr node)
    {
        inATrueExpr(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueExpr(node);
    }

    public void inAEqExpr(AEqExpr node)
    {
        defaultIn(node);
    }

    public void outAEqExpr(AEqExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqExpr(AEqExpr node)
    {
        inAEqExpr(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAEqExpr(node);
    }

    public void inANeqExpr(ANeqExpr node)
    {
        defaultIn(node);
    }

    public void outANeqExpr(ANeqExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqExpr(ANeqExpr node)
    {
        inANeqExpr(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outANeqExpr(node);
    }

    public void inALtExpr(ALtExpr node)
    {
        defaultIn(node);
    }

    public void outALtExpr(ALtExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtExpr(ALtExpr node)
    {
        inALtExpr(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outALtExpr(node);
    }

    public void inAGtExpr(AGtExpr node)
    {
        defaultIn(node);
    }

    public void outAGtExpr(AGtExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExpr(AGtExpr node)
    {
        inAGtExpr(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAGtExpr(node);
    }

    public void inALeqExpr(ALeqExpr node)
    {
        defaultIn(node);
    }

    public void outALeqExpr(ALeqExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeqExpr(ALeqExpr node)
    {
        inALeqExpr(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outALeqExpr(node);
    }

    public void inAGeqExpr(AGeqExpr node)
    {
        defaultIn(node);
    }

    public void outAGeqExpr(AGeqExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeqExpr(AGeqExpr node)
    {
        inAGeqExpr(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAGeqExpr(node);
    }

    public void inAPlusExpr(APlusExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusExpr(APlusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpr(APlusExpr node)
    {
        inAPlusExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAPlusExpr(node);
    }

    public void inAMinusExpr(AMinusExpr node)
    {
        defaultIn(node);
    }

    public void outAMinusExpr(AMinusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpr(AMinusExpr node)
    {
        inAMinusExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMinusExpr(node);
    }

    public void inAMultExpr(AMultExpr node)
    {
        defaultIn(node);
    }

    public void outAMultExpr(AMultExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpr(AMultExpr node)
    {
        inAMultExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMultExpr(node);
    }

    public void inADivExpr(ADivExpr node)
    {
        defaultIn(node);
    }

    public void outADivExpr(ADivExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpr(ADivExpr node)
    {
        inADivExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADivExpr(node);
    }

    public void inAModExpr(AModExpr node)
    {
        defaultIn(node);
    }

    public void outAModExpr(AModExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExpr(AModExpr node)
    {
        inAModExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAModExpr(node);
    }

    public void inAListExpr(AListExpr node)
    {
        defaultIn(node);
    }

    public void outAListExpr(AListExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListExpr(AListExpr node)
    {
        inAListExpr(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getElements());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAListExpr(node);
    }

    public void inAListConstructorExpr(AListConstructorExpr node)
    {
        defaultIn(node);
    }

    public void outAListConstructorExpr(AListConstructorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListConstructorExpr(AListConstructorExpr node)
    {
        inAListConstructorExpr(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getHead());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTail() != null)
        {
            node.getTail().apply(this);
        }
        outAListConstructorExpr(node);
    }

    public void inAVarExpr(AVarExpr node)
    {
        defaultIn(node);
    }

    public void outAVarExpr(AVarExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExpr(AVarExpr node)
    {
        inAVarExpr(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAVarExpr(node);
    }

    public void inANumberExpr(ANumberExpr node)
    {
        defaultIn(node);
    }

    public void outANumberExpr(ANumberExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberExpr(ANumberExpr node)
    {
        inANumberExpr(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outANumberExpr(node);
    }

    public void inAWildcardExpr(AWildcardExpr node)
    {
        defaultIn(node);
    }

    public void outAWildcardExpr(AWildcardExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcardExpr(AWildcardExpr node)
    {
        inAWildcardExpr(node);
        if(node.getWildcard() != null)
        {
            node.getWildcard().apply(this);
        }
        outAWildcardExpr(node);
    }

    public void inAPredCallExpr(APredCallExpr node)
    {
        defaultIn(node);
    }

    public void outAPredCallExpr(APredCallExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPredCallExpr(APredCallExpr node)
    {
        inAPredCallExpr(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getArgs());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAPredCallExpr(node);
    }
}
