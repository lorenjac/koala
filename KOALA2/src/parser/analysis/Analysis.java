/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser.analysis;

import parser.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProg(AProg node);
    void caseARule(ARule node);
    void caseAHead(AHead node);
    void caseAFalseExpr(AFalseExpr node);
    void caseATrueExpr(ATrueExpr node);
    void caseAEqExpr(AEqExpr node);
    void caseANeqExpr(ANeqExpr node);
    void caseALtExpr(ALtExpr node);
    void caseAGtExpr(AGtExpr node);
    void caseALeqExpr(ALeqExpr node);
    void caseAGeqExpr(AGeqExpr node);
    void caseAPlusExpr(APlusExpr node);
    void caseAMinusExpr(AMinusExpr node);
    void caseAMultExpr(AMultExpr node);
    void caseADivExpr(ADivExpr node);
    void caseAModExpr(AModExpr node);
    void caseAListExpr(AListExpr node);
    void caseAListConstructorExpr(AListConstructorExpr node);
    void caseAVarExpr(AVarExpr node);
    void caseANumberExpr(ANumberExpr node);
    void caseAWildcardExpr(AWildcardExpr node);
    void caseAPredCallExpr(APredCallExpr node);

    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTMain(TMain node);
    void caseTAssign(TAssign node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBra(TLBra node);
    void caseTRBra(TRBra node);
    void caseTPipe(TPipe node);
    void caseTComma(TComma node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTLeq(TLeq node);
    void caseTGeq(TGeq node);
    void caseTWildcard(TWildcard node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTDot(TDot node);
    void caseTColon(TColon node);
    void caseTIdent(TIdent node);
    void caseTNumber(TNumber node);
    void caseTBlank(TBlank node);
    void caseTEol(TEol node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
