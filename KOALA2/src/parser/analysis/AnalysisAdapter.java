/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser.analysis;

import java.util.*;
import parser.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProg(AProg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARule(ARule node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHead(AHead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseExpr(AFalseExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueExpr(ATrueExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqExpr(AEqExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANeqExpr(ANeqExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtExpr(ALtExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtExpr(AGtExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALeqExpr(ALeqExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGeqExpr(AGeqExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExpr(APlusExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusExpr(AMinusExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultExpr(AMultExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivExpr(ADivExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModExpr(AModExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListExpr(AListExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListConstructorExpr(AListConstructorExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarExpr(AVarExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberExpr(ANumberExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWildcardExpr(AWildcardExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPredCallExpr(APredCallExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMain(TMain node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBra(TLBra node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBra(TRBra node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPipe(TPipe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeq(TLeq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGeq(TGeq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWildcard(TWildcard node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdent(TIdent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEol(TEol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
