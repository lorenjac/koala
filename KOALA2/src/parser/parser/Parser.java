/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser.parser;

import parser.lexer.*;
import parser.node.*;
import parser.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProg node1 = (PProg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AArule1Rule */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AArule2Rule */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce ASingleBodyAux */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AMultipleBodyAux */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AHead */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce ASingleHeadAux */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list);
            }
            break;
            case 7: /* reduce AMultipleHeadAux */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list);
            }
            break;
            case 8: /* reduce ATrueGexpr */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list);
            }
            break;
            case 9: /* reduce AFalseGexpr */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list);
            }
            break;
            case 10: /* reduce ACexprlistGexpr */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list);
            }
            break;
            case 11: /* reduce ASingleGexprAux */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list);
            }
            break;
            case 12: /* reduce AMultipleGexprAux */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list);
            }
            break;
            case 13: /* reduce AEqCexpr */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list);
            }
            break;
            case 14: /* reduce ANeqCexpr */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list);
            }
            break;
            case 15: /* reduce ALtCexpr */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list);
            }
            break;
            case 16: /* reduce AGtCexpr */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list);
            }
            break;
            case 17: /* reduce ALeqCexpr */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce AGeqCexpr */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce AArithmeticEexpr */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list);
            }
            break;
            case 20: /* reduce AListEexpr */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce APlusAexpr */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list);
            }
            break;
            case 22: /* reduce AMinusAexpr */
            {
                ArrayList<Object> list = new22();
                push(goTo(9), list);
            }
            break;
            case 23: /* reduce ANonAexpr */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list);
            }
            break;
            case 24: /* reduce AMultAexpr2 */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list);
            }
            break;
            case 25: /* reduce ADivAexpr2 */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list);
            }
            break;
            case 26: /* reduce AModAexpr2 */
            {
                ArrayList<Object> list = new26();
                push(goTo(10), list);
            }
            break;
            case 27: /* reduce ANonAexpr2 */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list);
            }
            break;
            case 28: /* reduce AParenthesesAexpr3 */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list);
            }
            break;
            case 29: /* reduce AVarAexpr3 */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list);
            }
            break;
            case 30: /* reduce ANumberAexpr3 */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list);
            }
            break;
            case 31: /* reduce AEmptyLexpr */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list);
            }
            break;
            case 32: /* reduce ANonEmptyLexpr */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list);
            }
            break;
            case 33: /* reduce AElementsOnlyList */
            {
                ArrayList<Object> list = new33();
                push(goTo(13), list);
            }
            break;
            case 34: /* reduce AConstructorList */
            {
                ArrayList<Object> list = new34();
                push(goTo(13), list);
            }
            break;
            case 35: /* reduce ASingleLhead */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list);
            }
            break;
            case 36: /* reduce AMultipleLhead */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list);
            }
            break;
            case 37: /* reduce AListLelem */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list);
            }
            break;
            case 38: /* reduce AVarLelem */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list);
            }
            break;
            case 39: /* reduce ANumberLelem */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list);
            }
            break;
            case 40: /* reduce AWildcLelem */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list);
            }
            break;
            case 41: /* reduce APredCallBelem */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list);
            }
            break;
            case 42: /* reduce ASingleBelemAux */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list);
            }
            break;
            case 43: /* reduce AMultipleBelemAux */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list);
            }
            break;
            case 44: /* reduce ATerminal$Rule */
            {
                ArrayList<Object> list = new44();
                push(goTo(18), list);
            }
            break;
            case 45: /* reduce ANonTerminal$Rule */
            {
                ArrayList<Object> list = new45();
                push(goTo(18), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogNode1 = new AProg(listNode3);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AArule1Rule */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRule pruleNode1;
        {
            // Block
        PHead pheadNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        pheadNode2 = (PHead)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }

        pruleNode1 = new ARule(pheadNode2, listNode4, listNode6, listNode7);
        }
	nodeList.add(pruleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AArule2Rule */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRule pruleNode1;
        {
            // Block
        PHead pheadNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        pheadNode2 = (PHead)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList7.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pruleNode1 = new ARule(pheadNode2, listNode4, listNode6, listNode8);
        }
	nodeList.add(pruleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ASingleBodyAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AMultipleBodyAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexprNode1 != null)
	{
	  listNode3.add(pexprNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AHead */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHead pheadNode1;
        {
            // Block
        TIdent tidentNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pheadNode1 = new AHead(tidentNode2, listNode4);
        }
	nodeList.add(pheadNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ASingleHeadAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TIdent tidentNode1;
        tidentNode1 = (TIdent)nodeArrayList1.get(0);
	if(tidentNode1 != null)
	{
	  listNode2.add(tidentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AMultipleHeadAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        TIdent tidentNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        tidentNode1 = (TIdent)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(tidentNode1 != null)
	{
	  listNode3.add(tidentNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ATrueGexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexprNode1 = new ATrueExpr(ttrueNode2);
        }
	if(pexprNode1 != null)
	{
	  listNode3.add(pexprNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AFalseGexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexprNode1 = new AFalseExpr(tfalseNode2);
        }
	if(pexprNode1 != null)
	{
	  listNode3.add(pexprNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ACexprlistGexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ASingleGexprAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AMultipleGexprAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexprNode1 != null)
	{
	  listNode3.add(pexprNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AEqCexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIdent tidentNode2;
        PExpr pexprNode3;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AEqExpr(tidentNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ANeqCexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIdent tidentNode2;
        PExpr pexprNode3;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ANeqExpr(tidentNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ALtCexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIdent tidentNode2;
        PExpr pexprNode3;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ALtExpr(tidentNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AGtCexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIdent tidentNode2;
        PExpr pexprNode3;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AGtExpr(tidentNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ALeqCexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIdent tidentNode2;
        PExpr pexprNode3;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ALeqExpr(tidentNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AGeqCexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIdent tidentNode2;
        PExpr pexprNode3;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AGeqExpr(tidentNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AArithmeticEexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AListEexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce APlusAexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new APlusExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AMinusAexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMinusExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ANonAexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AMultAexpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMultExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ADivAexpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ADivExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AModAexpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AModExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ANonAexpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AParenthesesAexpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AVarAexpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIdent tidentNode2;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);

        pexprNode1 = new AVarExpr(tidentNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ANumberAexpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexprNode1 = new ANumberExpr(tnumberNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AEmptyLexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pexprNode1 = new AListExpr(listNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ANonEmptyLexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AElementsOnlyList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pexprNode1 = new AListExpr(listNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AConstructorList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpr pexprNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AListConstructorExpr(listNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ASingleLhead */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AMultipleLhead */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexprNode1 != null)
	{
	  listNode3.add(pexprNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AListLelem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AVarLelem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIdent tidentNode2;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);

        pexprNode1 = new AVarExpr(tidentNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ANumberLelem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexprNode1 = new ANumberExpr(tnumberNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AWildcLelem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TWildcard twildcardNode2;
        twildcardNode2 = (TWildcard)nodeArrayList1.get(0);

        pexprNode1 = new AWildcardExpr(twildcardNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce APredCallBelem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIdent tidentNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexprNode1 = new APredCallExpr(tidentNode2, listNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ASingleBelemAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AMultipleBelemAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexprNode1 != null)
	{
	  listNode3.add(pexprNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ATerminal$Rule */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PRule pruleNode1;
        pruleNode1 = (PRule)nodeArrayList1.get(0);
	if(pruleNode1 != null)
	{
	  listNode2.add(pruleNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ANonTerminal$Rule */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PRule pruleNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pruleNode2 = (PRule)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pruleNode2 != null)
	{
	  listNode3.add(pruleNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {24, SHIFT, 1}, },
			{{-1, ERROR, 1}, {4, SHIFT, 6}, },
			{{-1, ERROR, 2}, {26, ACCEPT, -1}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 4}, {3, SHIFT, 7}, },
			{{-1, REDUCE, 0}, {24, SHIFT, 1}, },
			{{-1, ERROR, 6}, {24, SHIFT, 9}, },
			{{-1, ERROR, 7}, {0, SHIFT, 11}, {1, SHIFT, 12}, {24, SHIFT, 13}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 6}, {9, SHIFT, 17}, },
			{{-1, ERROR, 10}, {5, SHIFT, 18}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 13}, {10, SHIFT, 19}, {11, SHIFT, 20}, {12, SHIFT, 21}, {13, SHIFT, 22}, {14, SHIFT, 23}, {15, SHIFT, 24}, },
			{{-1, ERROR, 14}, {23, SHIFT, 25}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, {9, SHIFT, 26}, },
			{{-1, ERROR, 17}, {24, SHIFT, 9}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 19}, {4, SHIFT, 28}, {6, SHIFT, 29}, {24, SHIFT, 30}, {25, SHIFT, 31}, },
			{{-1, ERROR, 20}, {4, SHIFT, 28}, {6, SHIFT, 29}, {24, SHIFT, 30}, {25, SHIFT, 31}, },
			{{-1, ERROR, 21}, {4, SHIFT, 28}, {6, SHIFT, 29}, {24, SHIFT, 30}, {25, SHIFT, 31}, },
			{{-1, ERROR, 22}, {4, SHIFT, 28}, {6, SHIFT, 29}, {24, SHIFT, 30}, {25, SHIFT, 31}, },
			{{-1, ERROR, 23}, {4, SHIFT, 28}, {6, SHIFT, 29}, {24, SHIFT, 30}, {25, SHIFT, 31}, },
			{{-1, ERROR, 24}, {4, SHIFT, 28}, {6, SHIFT, 29}, {24, SHIFT, 30}, {25, SHIFT, 31}, },
			{{-1, ERROR, 25}, {0, SHIFT, 11}, {1, SHIFT, 12}, {24, SHIFT, 13}, },
			{{-1, ERROR, 26}, {24, SHIFT, 13}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 28}, {4, SHIFT, 28}, {24, SHIFT, 30}, {25, SHIFT, 31}, },
			{{-1, ERROR, 29}, {6, SHIFT, 29}, {7, SHIFT, 45}, {16, SHIFT, 46}, {24, SHIFT, 47}, {25, SHIFT, 48}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 19}, {17, SHIFT, 53}, {18, SHIFT, 54}, },
			{{-1, REDUCE, 23}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 42}, {8, SHIFT, 58}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 44}, {5, SHIFT, 59}, {17, SHIFT, 53}, {18, SHIFT, 54}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 50}, {7, SHIFT, 60}, },
			{{-1, REDUCE, 33}, {8, SHIFT, 61}, },
			{{-1, REDUCE, 35}, {9, SHIFT, 62}, },
			{{-1, ERROR, 53}, {4, SHIFT, 28}, {24, SHIFT, 30}, {25, SHIFT, 31}, },
			{{-1, ERROR, 54}, {4, SHIFT, 28}, {24, SHIFT, 30}, {25, SHIFT, 31}, },
			{{-1, ERROR, 55}, {4, SHIFT, 28}, {24, SHIFT, 30}, {25, SHIFT, 31}, },
			{{-1, ERROR, 56}, {4, SHIFT, 28}, {24, SHIFT, 30}, {25, SHIFT, 31}, },
			{{-1, ERROR, 57}, {4, SHIFT, 28}, {24, SHIFT, 30}, {25, SHIFT, 31}, },
			{{-1, ERROR, 58}, {22, SHIFT, 68}, {24, SHIFT, 69}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 61}, {6, SHIFT, 29}, {16, SHIFT, 46}, {24, SHIFT, 47}, {25, SHIFT, 48}, },
			{{-1, ERROR, 62}, {6, SHIFT, 29}, {16, SHIFT, 46}, {24, SHIFT, 47}, {25, SHIFT, 48}, },
			{{-1, REDUCE, 21}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, },
			{{-1, REDUCE, 22}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 69}, {4, SHIFT, 74}, },
			{{-1, ERROR, 70}, {22, SHIFT, 75}, },
			{{-1, REDUCE, 3}, {9, SHIFT, 76}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 74}, {4, SHIFT, 28}, {6, SHIFT, 29}, {24, SHIFT, 30}, {25, SHIFT, 31}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 76}, {24, SHIFT, 69}, },
			{{-1, REDUCE, 42}, {9, SHIFT, 80}, },
			{{-1, ERROR, 78}, {5, SHIFT, 81}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 80}, {4, SHIFT, 28}, {6, SHIFT, 29}, {24, SHIFT, 30}, {25, SHIFT, 31}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 43}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {5, 8}, },
			{{-1, 70}, {76, 79}, },
			{{-1, 4}, },
			{{-1, 10}, {17, 27}, },
			{{-1, 14}, {25, 42}, },
			{{-1, 15}, {26, 43}, },
			{{-1, 16}, },
			{{-1, 77}, {19, 32}, {20, 37}, {21, 38}, {22, 39}, {23, 40}, {24, 41}, },
			{{-1, 33}, {28, 44}, },
			{{-1, 34}, {53, 63}, {54, 64}, },
			{{-1, 35}, {55, 65}, {56, 66}, {57, 67}, },
			{{-1, 36}, {29, 49}, {61, 49}, {62, 49}, },
			{{-1, 50}, },
			{{-1, 51}, {62, 73}, },
			{{-1, 52}, {61, 72}, },
			{{-1, 71}, },
			{{-1, 78}, {80, 82}, },
			{{-1, 5}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: ident",
			"expecting: '('",
			"expecting: EOF",
			"expecting: ident, EOF",
			"expecting: ':-'",
			"expecting: 'true', 'false', ident",
			"expecting: ')', ','",
			"expecting: ')'",
			"expecting: '|', ':'",
			"expecting: '=', '=\=', '<', '>', '<=', '>='",
			"expecting: ':'",
			"expecting: '|', ',', ':'",
			"expecting: '(', '[', ident, number",
			"expecting: '(', ident, number",
			"expecting: '[', ']', '_', ident, number",
			"expecting: ')', '|', ',', '+', '-', '*', '/', '%', ':'",
			"expecting: ')', '|', ',', '+', '-', ':'",
			"expecting: ')', '|', ',', ':'",
			"expecting: '|'",
			"expecting: ')', '+', '-'",
			"expecting: ')', ']', '|', ',', ':'",
			"expecting: ']', '|', ','",
			"expecting: ']'",
			"expecting: ']', '|'",
			"expecting: '.', ident",
			"expecting: '[', '_', ident, number",
			"expecting: '.'",
			"expecting: ',', '.'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 3, 0, 5, 3, 6, 7, 8, 8, 9, 10, 8, 11, 0, 4, 12, 12, 12, 12, 12, 12, 5, 0, 7, 13, 14, 15, 15, 11, 16, 15, 15, 17, 11, 11, 11, 11, 11, 18, 8, 19, 20, 21, 21, 21, 21, 22, 23, 21, 13, 13, 13, 13, 13, 24, 15, 20, 25, 25, 15, 15, 15, 15, 15, 3, 1, 26, 27, 22, 23, 12, 3, 0, 6, 7, 26, 12, 27, 7, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
